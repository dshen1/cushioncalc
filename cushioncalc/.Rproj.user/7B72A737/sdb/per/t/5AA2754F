{
    "contents" : "################################################################################\n## Server code for Shiny app to calculate Cushion diamond expected price\n## Author: matt.b.hudson@gmail.com\n################################################################################\n\n## Call libraries\nlibrary(memisc)\nlibrary(shiny)\nlibrary(scales)\nlibrary(ggplot2)\n\n## Import data and new column for the log price\nload(\"BigDiamonds.Rda\")\ndiamondsbig$logprice  <-  log(diamondsbig$price) \n\n## Create a model to estimate value of diamond based on attributes\nm1 = lm(logprice~  I(carat^(1/3)), \n        data=diamondsbig[diamondsbig$price < 50000 &\n                           diamondsbig$cert == \"GIA\" &\n                           diamondsbig$price > 10000,])\nm2 = update(m1, ~ . + carat)\nm3 = update(m2, ~ . + cut )\nm4 = update(m3, ~ . + color + clarity)\nmtable(m1, m2, m3, m4)\n\n## Function to calc cube root in plots\ncubroot_trans = function() trans_new(\"cubroot\", \n                                     transform= function(x) x^(1/3), \n                                     inverse = function(x) x^3 )\n\n## Call server\nshinyServer(function(input, output) {\n  \n  ## Create text summary\n  output$text1 <- renderText({\n    thisDiamond <- data.frame(carat = input$carat, \n                              cut = input$cut, \n                              color = input$color, \n                              clarity=input$clarity)\n    modEst <- predict(m4, newdata = thisDiamond, \n                      interval=\"prediction\", level = .95)\n    \n    paste(\"Expected Value:\", dollar(exp(modEst[1])),\"    \",\n          \"Lower Bound:\", dollar(exp(modEst[2])),\"     \",\n          \"Upper Bound:\", dollar(exp(modEst[3])))\n  })\n  \n   ## Plot summary\n   output$plot1 <- renderPlot({\n     thisDiamond <- data.frame(carat = input$carat, \n                               cut = input$cut, \n                               color = input$color, \n                               clarity=input$clarity)\n     modEst <- predict(m4, newdata = thisDiamond, \n                       interval=\"prediction\", level = .95)\n     expected <- exp(modEst[1])\n     lower <- exp(modEst[2])\n     upper <- exp(modEst[3])\n     \n     qplot(carat, price, data=\n            subset(diamondsbig,\n                   cut == input$cut & cut == input$cut &\n                     color == input$color & clarity == input$clarity & cert == 'GIA'),\n           geom=\"point\", alpha=I(.3)) +\n       scale_x_continuous(trans=cubroot_trans(), limits = c(0.2,4),\n                          breaks = c(0.2, 0.5, 1, 2, 3, 4)) +\n       scale_y_continuous(trans=log10_trans(), limits = c(350,70000),\n                          breaks = c(350, 1000, 5000, 10000, 15000, 20000, 30000, 40000)) +\n       theme_bw() + ggtitle(\"Cushion Diamonds by price\") +\n       geom_point(data = data.frame(carat = input$carat,\n                                    price = expected), aes(x = carat, y = price, \n                                                           color = \"red\")) +\n       geom_errorbar(data=data.frame(carat = input$carat,\n                                     price = expected,\n                                     lower = lower,\n                                     upper = upper),\n                     aes(x=carat, ymin=lower, ymax=upper, y = price), colour = \"red\")\n\n   })\n})\n\n",
    "created" : 1407202601541.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "188556416",
    "id" : "5AA2754F",
    "lastKnownWriteTime" : 1407375070,
    "path" : "~/Dropbox/diamonds-data/cushioncalc/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}