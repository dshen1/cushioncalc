################################################################################
## Script: Analysis_v7
## Author: Matt Hudson
## Description: This analysis places values on all the events in lacrosse and
##              gives them a weighting towards "goals".
################################################################################
## Call libraries and get setup
library(ggplot2)
library(RMySQL)
library(reshape2)
library(plyr)
library(scales)
setwd("~/Drobbox/100by55")
################################################################################
## Data
################################################################################
conn  <- dbConnect(MySQL(),
user = "matthudson",
password = "",
dbname = "100by55",
host = "localhost")
install.packages('ggplot2')
install.packages("RMySQL")
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("DBI")
win_estimators <- read.csv("~/Downloads/win_estimators.csv")
View(win_estimators)
summary(win_estimators)
mean(win_estimators$WPct)
sd(win_estimators$WPct)
mean(win_estimators$R)
1/162
avgRuns <- mean(win_estimators$R)
avgRuns - sqrt(avgRuns^2/(1/(.5-(1/162)))-1)
avgRuns - sqrt(avgRuns^2/((1/(.5-(1/162)))-1))
estimators <- win_estimators[c('RperG', 'RAperG', 'WPct','Cook_WPct',  'Soolman_WPct',  'Kross_WPct', 'Smyth_WPct', 'BJames_Pythag_WPct', 'BJames_Pythag_WPctII')]
require('lattice')
splom(estimators, xlab='Win Estimators')
View(win_estimators)
splom(estimators, xlab='Win Estimators')
View(estimators)
View(estimators)
wpct_95th_pct = quantile(win_estimators$WPct, .95)
top_winners = win_estimators[win_estimators$WPct >= wpct_95th_pct, ]
summary(top_winners)
mean(top_winners$WPct)
splom(top_winners, xlab='Win Estimators')
View(top_winners)
View(top_winners)
View(top_winners)
View(top_winners)
n_top_winners <- subset(top_winers, -c('yearID', 'teamID', 'W','L','R', 'RA'))
n_top_winners <- subset(top_winners, -c('yearID', 'teamID', 'W','L','R', 'RA'))
n_top_winners <- subset(top_winners, select = -c('yearID', 'teamID', 'W','L','R', 'RA'))
n_top_winners <- subset(top_winners, select = c('yearID', 'teamID', 'W','L','R', 'RA'))
help(subset)
n_top_winners <- subset(top_winners, select = -c(yearID, teamID, W,L,R, RA))
splom(n_top_winners, xlab='Win Estimators')
splom(estimators, xlab='Win Estimators')
cor()
help(cor)
cor(top_winners$BJames_Pythag_WPctII)
cor(top_winners$BJames_Pythag_WPct)
cor(top_winners$BJames_Pythag_WPct,top_winners$BJames_Pythag_WPctII)
cor(esitmators$BJames_Pythag_WPct,esitmators$BJames_Pythag_WPctII)
cor(estimators$BJames_Pythag_WPct,estimators$BJames_Pythag_WPctII)
install.packages('RMySQL')
install.packages("RMySQL")
install.packages('ggplot2')
install.packages('RMySQL')
################################################################################
## Script: Analysis_v7
## Author: Matt Hudson
## Description: This analysis places values on all the events in lacrosse and
##              gives them a weighting towards "goals".
################################################################################
## Call libraries and get setup
library(ggplot2)
library(RMySQL)
library(reshape2)
library(plyr)
library(scales)
setwd("~/Drobbox/100by55")
conn  <- dbConnect(MySQL(),
user = "matthudson",
password = "",
dbname = "100by55",
host = "localhost")
data <-
dbGetQuery(conn,"
SELECT
game_id,
team_id,
SUM(goals) AS goals,
SUM(assists) AS assists,
SUM(shots) AS shots,
SUM(sog) AS sog,
SUM(gb) AS gb,
SUM(to) AS to,
SUM(ct) AS ct,
SUM(fo_won) AS fo_won,
SUM(pen) AS pen,
SUM(pen_time) AS pen_time
FROM f_player_stats
GROUP BY 1,2;")
data <-
dbGetQuery(conn,"
SELECT
game_id,
team_id,
SUM(goals) AS goals,
SUM(assists) AS assists,
SUM(shots) AS shots,
SUM(sog) AS sog,
SUM(gb) AS gb,
SUM(`to`) AS `to`,
SUM(ct) AS ct,
SUM(fo_won) AS fo_won,
SUM(pen) AS pen,
SUM(pen_time) AS pen_time
FROM f_player_stats
GROUP BY 1,2;")
stats <- subset(data, select = -c(game_id, team_id))
splom(stats, xlab = "Lax Game Variables")
library("lattice", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
splom(stats, xlab = "Lax Game Variables")
data <-
dbGetQuery(conn,"
SELECT
game_id,
team_id,
SUM(goals) AS goals,
SUM(assists) AS assists,
SUM(shots) AS shots,
SUM(sog) AS sog,
SUM(shots)/SUM(sog) AS sog_pct,
SUM(goals)/SUM(shots) AS goal_pct,
SUM(gb) AS gb,
SUM(`to`) AS `to`,
SUM(ct) AS ct,
SUM(fo_won) AS fo_won,
SUM(pen) AS pen,
SUM(pen_time) AS pen_time
FROM f_player_stats
GROUP BY 1,2;")
stats <- subset(data, select = -c(game_id, team_id))
splom(stats, xlab = "Lax Game Variables")
cor(stats)
install.packages('ggvis')
library(ggvis)
help(ggvis)
mtcars %>% ggvis(~mpg, ~wt)
mtcars %>% ggvis(~mpg, ~wt, fill := "red")
ggvis(~mpg, ~wt) %>%
layer_points() %>%
layer_smooths()
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='cushioncalc', token='9D035B007698BE753659EB40A2ACECC6', secret='XSUiYwuaA9vDTrf3EeILuIgvV9CGPl0e1sKcxLIz')
getwd()
setwd("~/Dropbox/diamonds-data/cushioncalc")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library(shiny)
runApp()
deployApp()
library(shinyapps)
deployApp()
library(shinyapp)
library(shinyapps)
deployApp()
runApp()
library(shinyapps)
runApp()
run()
library(shiny)
runApp()
runApp()
install.packages('googlevis')
library(memisc)
library(shiny)
library(scales)
library(ggplot2)
## Import data and new column for the log price
load("BigDiamonds.Rda")
diamondsbig$logprice  <-  log(diamondsbig$price)
m1 = lm(logprice~  I(carat^(1/3)),
data=diamondsbig[diamondsbig$price < 50000 & diamondsbig$cert == "GIA",])
m2 = update(m1, ~ . + carat)
m3 = update(m2, ~ . + cut )
m4 = update(m3, ~ . + color + clarity)
mtable(m1, m2, m3, m4)
help(mtable)
m1 = lm(logprice~  I(carat^(1/3)),
data=diamondsbig[diamondsbig$price < 50000 & diamondsbig$cert == "GIA",])
m3 = update(m1, ~ . + cut )
m4 = update(m3, ~ . + color + clarity)
mtable(m1, m3, m4)
m1 = lm(logprice~  I(carat^(1/3)),
data=diamondsbig[diamondsbig$price < 50000 & diamondsbig$cert == "GIA",])
m2 = update(m1, ~ . + carat)
m3 = update(m2, ~ . + cut )
m4 = update(m3, ~ . + color + clarity)
mtable(m1, m2 m3, m4)
mtable(m1, m2, m3, m4)
library(shinyapp)
library(shiny)
run()
runApp()
runApp()
View(diamondsbig)
library(memisc)
library(shiny)
library(scales)
library(ggplot2)
## Import data and new column for the log price
load("BigDiamonds.Rda")
diamondsbig$logprice  <-  log(diamondsbig$price)
View(diamondsbig)
runApp()
## Call libraries
library(memisc)
library(shiny)
library(scales)
library(ggplot2)
## Import data and new column for the log price
load("BigDiamonds.Rda")
diamondsbig$logprice  <-  log(diamondsbig$price)
## Create a model to estimate value of diamond based on attributes
m1 = lm(logprice~  I(carat^(1/3)),
data=diamondsbig[diamondsbig$price < 50000 & diamondsbig$cert == "GIA",])
m2 = update(m1, ~ . + carat)
m3 = update(m2, ~ . + cut )
m4 = update(m3, ~ . + color + clarity)
mtable(m1, m2, m3, m4)
runApp()
runApp()
runApp()
library(ggplot2)
p <- ggplot(mtcars, aes(x=wt, y=mpg, label=rownames(mtcars)))
p
p + geom_text()
library(shiny)
runApp()
library(shiny)
runApp()
help(shiny)
deployApp()
library(shinyapps)
deployApp()
q()
runApp()
library(shinyApp)
library("shinyApp")
library(shiny)
runApp()
load("BigDiamonds.Rda")
